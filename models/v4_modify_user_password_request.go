// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V4ModifyUserPasswordRequest Request model for modifying a user's password
// swagger:model v4ModifyUserPasswordRequest
type V4ModifyUserPasswordRequest struct {

	// Current password encoded in Base64. Not required for admins
	// Format: byte
	CurrentPasswordBase64 strfmt.Base64 `json:"current_password_base64,omitempty"`

	// New password encoded in Base64
	// Required: true
	// Format: byte
	NewPasswordBase64 *strfmt.Base64 `json:"new_password_base64"`
}

// Validate validates this v4 modify user password request
func (m *V4ModifyUserPasswordRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentPasswordBase64(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPasswordBase64(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V4ModifyUserPasswordRequest) validateCurrentPasswordBase64(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentPasswordBase64) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *V4ModifyUserPasswordRequest) validateNewPasswordBase64(formats strfmt.Registry) error {

	if err := validate.Required("new_password_base64", "body", m.NewPasswordBase64); err != nil {
		return err
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

// MarshalBinary interface implementation
func (m *V4ModifyUserPasswordRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V4ModifyUserPasswordRequest) UnmarshalBinary(b []byte) error {
	var res V4ModifyUserPasswordRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
