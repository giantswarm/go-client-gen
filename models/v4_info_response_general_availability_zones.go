// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V4InfoResponseGeneralAvailabilityZones Number of availability zones which a cluster can be spread across.
// swagger:model v4InfoResponseGeneralAvailabilityZones
type V4InfoResponseGeneralAvailabilityZones struct {

	// Default number of availability zones for a cluster.
	// Required: true
	// Maximum: 3
	// Minimum: 1
	Default *int64 `json:"default"`

	// Number of availability zones in the region of this installation.
	// Required: true
	// Maximum: 10
	// Minimum: 0
	Max *int64 `json:"max"`

	// The availability zones available in the installation's region for use with tenant clusters.
	// Max Items: 10
	// Min Items: 1
	Zones []string `json:"zones"`
}

// Validate validates this v4 info response general availability zones
func (m *V4InfoResponseGeneralAvailabilityZones) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V4InfoResponseGeneralAvailabilityZones) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", m.Default); err != nil {
		return err
	}

	if err := validate.MinimumInt("default", "body", int64(*m.Default), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("default", "body", int64(*m.Default), 3, false); err != nil {
		return err
	}

	return nil
}

func (m *V4InfoResponseGeneralAvailabilityZones) validateMax(formats strfmt.Registry) error {

	if err := validate.Required("max", "body", m.Max); err != nil {
		return err
	}

	if err := validate.MinimumInt("max", "body", int64(*m.Max), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max", "body", int64(*m.Max), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *V4InfoResponseGeneralAvailabilityZones) validateZones(formats strfmt.Registry) error {

	if swag.IsZero(m.Zones) { // not required
		return nil
	}

	iZonesSize := int64(len(m.Zones))

	if err := validate.MinItems("zones", "body", iZonesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("zones", "body", iZonesSize, 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V4InfoResponseGeneralAvailabilityZones) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V4InfoResponseGeneralAvailabilityZones) UnmarshalBinary(b []byte) error {
	var res V4InfoResponseGeneralAvailabilityZones
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
