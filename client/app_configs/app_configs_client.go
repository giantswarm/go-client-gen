// Code generated by go-swagger; DO NOT EDIT.

package app_configs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new app configs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app configs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateClusterAppConfigV4 creates app config v4

This operation allows you to create a user-values ConfigMap for a specific app. The app does
not have to exist before hand.

If the app does exist, this endpoint will ensure that the App CR gets it's
user_config field set correctly.

However, if the app exists and the user_config is already set to something,
then this request will fail. You will in that case most likely want to
update the config using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/config/`
endpoint.

For apps on v5 clusters, please use the v5 version of this endpoint.


### Example POST request
```json
  {
    "agent": {
      "key": "secret-key-here",
      "endpointHost": "saas-eu-west-1.instana.io",
      "endpointPort": "443",
    },
    "zone": {
      "name": "giantswarm-cluster"
    }
  }
```

*/
func (a *Client) CreateClusterAppConfigV4(params *CreateClusterAppConfigV4Params, authInfo runtime.ClientAuthInfoWriter) (*CreateClusterAppConfigV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterAppConfigV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterAppConfigV4",
		Method:             "PUT",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterAppConfigV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateClusterAppConfigV4OK), nil

}

/*
CreateClusterAppConfigV5 creates app config v5

This operation allows you to create a user-values ConfigMap for a specific app. The app does
not have to exist before hand.

If the app does exist, this endpoint will ensure that the App CR gets it's
user_config field set correctly.

However, if the app exists and the user_config is already set to something,
then this request will fail. You will in that case most likely want to
update the config using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/config/`
endpoint.

### Example POST request
```json
  {
    "agent": {
      "key": "secret-key-here",
      "endpointHost": "saas-eu-west-1.instana.io",
      "endpointPort": "443",
    },
    "zone": {
      "name": "giantswarm-cluster"
    }
  }
```

*/
func (a *Client) CreateClusterAppConfigV5(params *CreateClusterAppConfigV5Params, authInfo runtime.ClientAuthInfoWriter) (*CreateClusterAppConfigV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterAppConfigV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterAppConfigV5",
		Method:             "PUT",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterAppConfigV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateClusterAppConfigV5OK), nil

}

/*
DeleteClusterAppConfigV4 deletes an app config v4

This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and
stored in the cluster ID namespace.

Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.

Do make sure you also update the app and remove the reference.

The preferred order is to first remove the reference to the ConfigMap by
updating the app, and only then delete the ConfigMap using this endpoint.

For apps on v5 clusters, please use the v5 version of this endpoint.

*/
func (a *Client) DeleteClusterAppConfigV4(params *DeleteClusterAppConfigV4Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAppConfigV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterAppConfigV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterAppConfigV4",
		Method:             "DELETE",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterAppConfigV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAppConfigV4OK), nil

}

/*
DeleteClusterAppConfigV5 deletes an app config v5

This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and
stored in the cluster ID namespace.

Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.

Do make sure you also update the app and remove the reference.

The preferred order is to first remove the reference to the ConfigMap by
updating the app, and only then delete the ConfigMap using this endpoint.

*/
func (a *Client) DeleteClusterAppConfigV5(params *DeleteClusterAppConfigV5Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAppConfigV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterAppConfigV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterAppConfigV5",
		Method:             "DELETE",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterAppConfigV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAppConfigV5OK), nil

}

/*
GetClusterAppConfigV4 gets app config v4

This operation allows you to fetch the user-values ConfigMap associated
with an app.

For apps on v5 clusters, please use the v5 version of this endpoint.

*/
func (a *Client) GetClusterAppConfigV4(params *GetClusterAppConfigV4Params, authInfo runtime.ClientAuthInfoWriter) (*GetClusterAppConfigV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterAppConfigV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterAppConfigV4",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterAppConfigV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterAppConfigV4OK), nil

}

/*
GetClusterAppConfigV5 gets app config v5

This operation allows you to fetch the user-values ConfigMap associated
with an app.

*/
func (a *Client) GetClusterAppConfigV5(params *GetClusterAppConfigV5Params, authInfo runtime.ClientAuthInfoWriter) (*GetClusterAppConfigV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterAppConfigV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterAppConfigV5",
		Method:             "GET",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterAppConfigV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterAppConfigV5OK), nil

}

/*
ModifyClusterAppConfigV4 modifies app config v4

This operation allows you to modify the values ConfigMap for a specific app.
It's only possible to modify app configs that have been named according to the convention of
{app-name}-user-values and stored in the cluster ID namespace.

The full values key of the ConfigMap will be replaced by the JSON body
of your request.

For apps on v5 clusters, please use the v5 version of this endpoint.

### Example PATCH request
```json
  {
    "agent": {
      "key": "a-new-key-here",
    }
  }
```

If the ConfigMap contained content like:

```json
  {
    "agent": {
      "key": "an-old-key-here",
      "admin": true,
    },
    "server": {
      "url": "giantswarm.io",
    }
  }
```

Then the "server" and "admin" keys will be removed.

*/
func (a *Client) ModifyClusterAppConfigV4(params *ModifyClusterAppConfigV4Params, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterAppConfigV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterAppConfigV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyClusterAppConfigV4",
		Method:             "PATCH",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterAppConfigV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterAppConfigV4OK), nil

}

/*
ModifyClusterAppConfigV5 modifies app config v5

This operation allows you to modify the values ConfigMap for a specific app.
It's only possible to modify app configs that have been named according to the convention of
{app-name}-user-values and stored in the cluster ID namespace.

The full values key of the ConfigMap will be replaced by the JSON body
of your request.

### Example PATCH request
```json
  {
    "agent": {
      "key": "a-new-key-here",
    }
  }
```

If the ConfigMap contained content like:

```json
  {
    "agent": {
      "key": "an-old-key-here",
      "admin": true,
    },
    "server": {
      "url": "giantswarm.io",
    }
  }
```

Then the "server" and "admin" keys will be removed.

*/
func (a *Client) ModifyClusterAppConfigV5(params *ModifyClusterAppConfigV5Params, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterAppConfigV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterAppConfigV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyClusterAppConfigV5",
		Method:             "PATCH",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/config/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterAppConfigV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterAppConfigV5OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
