// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new apps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateClusterAppV4 installs an app v4

Install an app on a tenant cluster by posting to this endpoint.
For apps on v5 clusters, please use the v5 version of this endpoint.

The spec field represents the app we'll be installing, and so spec.name refers to
the name of the chart that installs this app in the catalog.

The response you get on a succesful create includes the status of the app. However
since the App is still initialising and this is an asynchronous operation, it is
likely that the fields in this status object will be all empty values.

To check on the status of your app, perform a GET to /v4/clusters/{cluster_id}/apps/,
and check the status field of the app.

### Example PUT request
```json
  {
    "spec": {
      "catalog": "sample-catalog",
      "name": "prometheus-chart",
      "namespace": "prometheus",
      "version": "0.2.0",
    }
  }
```

### About the user_config field in the response
This field is not editable by you, but is set automatically by the API
if a configmap named `{app_name}-user-values` exists in the tenant cluster
namespace on the control plane.

The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows
you to create such a configmap using this API.

It is recommended to create your config before creating your app. This
will result in a faster deploy.

However, you can create your config after creating the app if you wish,
this API will take care of setting the `user_config` field of the app
correctly for you.

### Why can't I just set the `user_config` value myself?
It simplifies usage while also being a security measure.

Furthermore it is also a security measure and ensures that users of this
API can't access arbitrary configmaps of the control plane.

This API will only allow you to edit or access configmaps that adhere
to a strict naming convention.

*/
func (a *Client) CreateClusterAppV4(params *CreateClusterAppV4Params, authInfo runtime.ClientAuthInfoWriter) (*CreateClusterAppV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterAppV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterAppV4",
		Method:             "PUT",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterAppV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateClusterAppV4OK), nil

}

/*
CreateClusterAppV5 installs an app v5

Install an app on a tenant cluster by posting to this endpoint.

The spec field represents the app we'll be installing, and so spec.name refers to
the name of the chart that installs this app in the catalog.

The response you get on a succesful create includes the status of the app. However
since the App is still initialising and this is an asynchronous operation, it is
likely that the fields in this status object will be all empty values.

To check on the status of your app, perform a GET to /v5/clusters/{cluster_id}/apps/,
and check the status field of the app.

### Example PUT request
```json
  {
    "spec": {
      "catalog": "sample-catalog",
      "name": "prometheus-chart",
      "namespace": "prometheus",
      "version": "0.2.0",
    }
  }
```

### About the user_config field in the response
This field is not editable by you, but is set automatically by the API
if a configmap named `{app_name}-user-values` exists in the tenant cluster
namespace on the control plane.

The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows
you to create such a configmap using this API.

It is recommended to create your config before creating your app. This
will result in a faster deploy.

However, you can create your config after creating the app if you wish,
this API will take care of setting the `user_config` field of the app
correctly for you.

### Why can't I just set the `user_config` value myself?
It simplifies usage while also being a security measure.

Furthermore it is also a security measure and ensures that users of this
API can't access arbitrary configmaps of the control plane.

This API will only allow you to edit or access configmaps that adhere
to a strict naming convention.

*/
func (a *Client) CreateClusterAppV5(params *CreateClusterAppV5Params, authInfo runtime.ClientAuthInfoWriter) (*CreateClusterAppV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterAppV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterAppV5",
		Method:             "PUT",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterAppV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateClusterAppV5OK), nil

}

/*
DeleteClusterAppV4 deletes an app v4

This operation allows a user to delete an app.
For apps on v5 clusters, please use the v5 version of this endpoint.

*/
func (a *Client) DeleteClusterAppV4(params *DeleteClusterAppV4Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAppV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterAppV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterAppV4",
		Method:             "DELETE",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterAppV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAppV4OK), nil

}

/*
DeleteClusterAppV5 deletes an app v5

This operation allows a user to delete an app.

*/
func (a *Client) DeleteClusterAppV5(params *DeleteClusterAppV5Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAppV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterAppV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterAppV5",
		Method:             "DELETE",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterAppV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAppV5OK), nil

}

/*
GetAppCatalogs gets a list of app catalogs configured on your installation

Returns an array of app catalog objects, which contains further metadata,
including a URL to fetch the full index of each catalog.


#### About the Labels

- `application.giantswarm.io/catalog-type`
  Describes the type of catalog.

  - `managed` - Apps in this catalog are managed by Giant Swarm.
  - `incubator` - Apps in this catalog are a work in progress. They're
                  made with your Giant Swarm cluster in mind though, so
                  they should work. Feedback is appreciated on these apps.
  - `test` - Apps in this catalog will soon graduate to incubator status,
             you most likely will not see any `test` catalogs on your
             installations.
  - `community` - Apps in this catalog are provided by the kubernetes
                  community. They will most likely not work without making
                  some changes to the security settings of your cluster.

  App Catalogs can also be labeled as `internal`, however these catalogs
  contain apps that run on our control planes. These `internal` app catalogs
  will be filtered out and never shown when calling this endpoint.

  For more details on app catalogs visit: https://docs.giantswarm.io/basics/app-catalog/


### Example
```json
  [
    {
      "metadata": {
        "name": "sample-catalog",
        "labels": {
          "application.giantswarm.io/catalog-type": "test",
          "app-operator.giantswarm.io/version": "1.0.0",
        },
      },

      "spec": {
        "description": "Giant Swarm's Sample Catalog with a few apps to test things out.",
        "logoURL": "https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png",

        "storage": {
          "URL": "https://giantswarm.github.com/sample-catalog/",
          "type": "helm"
        },
        "title": "Sample Catalog"
      }
    }
  ]
```

*/
func (a *Client) GetAppCatalogs(params *GetAppCatalogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppCatalogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppCatalogs",
		Method:             "GET",
		PathPattern:        "/v4/appcatalogs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppCatalogsOK), nil

}

/*
GetClusterAppsV4 gets a list of apps on a cluster v4

Returns an array of apps installed on a given cluster.
For apps on v5 clusters, please use the v5 version of this endpoint.

### Example
```json
  [
    {
      "metadata": {
        "name": "my-awesome-prometheus",
        "labels": {}
      },

      "spec": {
        "catalog": "sample-catalog"
        "name": "prometheus-chart",
        "namespace": "giantswarm",
        "version": "0.2.0",
        "user_config": {
          "configmap": {
            "name": "prometheus-user-values",
            "namespace": "123ab"
          }
        }
      },

      "status": {
        "app_version": "1.0.0",
        "release": {
          "last_deployed": "2019-04-08T12:34:00Z",
          "status": "DEPLOYED"
        },
        "version": "0.2.0",
      }
    }
  ]
```

*/
func (a *Client) GetClusterAppsV4(params *GetClusterAppsV4Params, authInfo runtime.ClientAuthInfoWriter) (*GetClusterAppsV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterAppsV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterAppsV4",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterAppsV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterAppsV4OK), nil

}

/*
GetClusterAppsV5 gets a list of apps on a cluster v5

Returns an array of apps installed on a given cluster.

### Example
```json
  [
    {
      "metadata": {
        "name": "my-awesome-prometheus",
        "labels": {}
      },

      "spec": {
        "catalog": "sample-catalog"
        "name": "prometheus-chart",
        "namespace": "giantswarm",
        "version": "0.2.0",
        "user_config": {
          "configmap": {
            "name": "prometheus-user-values",
            "namespace": "123ab"
          }
        }
      },

      "status": {
        "app_version": "1.0.0",
        "release": {
          "last_deployed": "2019-04-08T12:34:00Z",
          "status": "DEPLOYED"
        },
        "version": "0.2.0",
      }
    }
  ]
```

*/
func (a *Client) GetClusterAppsV5(params *GetClusterAppsV5Params, authInfo runtime.ClientAuthInfoWriter) (*GetClusterAppsV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterAppsV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterAppsV5",
		Method:             "GET",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterAppsV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterAppsV5OK), nil

}

/*
ModifyClusterAppV4 modifies an app v4

This operation allows you to modify an existing app.

For apps on v5 clusters, please use the v5 version of this endpoint.

The following attributes can be modified:

- `version`: Changing this field lets you upgrade or downgrade an app.

`catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.

The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard.
Requests have to be sent with the `Content-Type: application/merge-patch+json` header.

*/
func (a *Client) ModifyClusterAppV4(params *ModifyClusterAppV4Params, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterAppV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterAppV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyClusterAppV4",
		Method:             "PATCH",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterAppV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterAppV4OK), nil

}

/*
ModifyClusterAppV5 modifies an app v5

This operation allows you to modify an existing app.

The following attributes can be modified:

- `version`: Changing this field lets you upgrade or downgrade an app.

`catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.

The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard.
Requests have to be sent with the `Content-Type: application/merge-patch+json` header.

*/
func (a *Client) ModifyClusterAppV5(params *ModifyClusterAppV5Params, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterAppV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterAppV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyClusterAppV5",
		Method:             "PATCH",
		PathPattern:        "/v5/clusters/{cluster_id}/apps/{app_name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterAppV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterAppV5OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
