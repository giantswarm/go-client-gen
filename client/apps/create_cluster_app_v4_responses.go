// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/giantswarm/gsclientgen/v2/models"
)

// CreateClusterAppV4Reader is a Reader for the CreateClusterAppV4 structure.
type CreateClusterAppV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateClusterAppV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateClusterAppV4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateClusterAppV4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateClusterAppV4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateClusterAppV4Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateClusterAppV4Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateClusterAppV4OK creates a CreateClusterAppV4OK with default headers values
func NewCreateClusterAppV4OK() *CreateClusterAppV4OK {
	return &CreateClusterAppV4OK{}
}

/*CreateClusterAppV4OK handles this case with default header values.

Create cluster app
*/
type CreateClusterAppV4OK struct {
	Payload *models.V4App
}

func (o *CreateClusterAppV4OK) Error() string {
	return fmt.Sprintf("[PUT /v4/clusters/{cluster_id}/apps/{app_name}/][%d] createClusterAppV4OK  %+v", 200, o.Payload)
}

func (o *CreateClusterAppV4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V4App)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateClusterAppV4BadRequest creates a CreateClusterAppV4BadRequest with default headers values
func NewCreateClusterAppV4BadRequest() *CreateClusterAppV4BadRequest {
	return &CreateClusterAppV4BadRequest{}
}

/*CreateClusterAppV4BadRequest handles this case with default header values.

Invalid input
*/
type CreateClusterAppV4BadRequest struct {
	Payload *models.V4GenericResponse
}

func (o *CreateClusterAppV4BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v4/clusters/{cluster_id}/apps/{app_name}/][%d] createClusterAppV4BadRequest  %+v", 400, o.Payload)
}

func (o *CreateClusterAppV4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V4GenericResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateClusterAppV4Unauthorized creates a CreateClusterAppV4Unauthorized with default headers values
func NewCreateClusterAppV4Unauthorized() *CreateClusterAppV4Unauthorized {
	return &CreateClusterAppV4Unauthorized{}
}

/*CreateClusterAppV4Unauthorized handles this case with default header values.

Permission denied
*/
type CreateClusterAppV4Unauthorized struct {
	Payload *models.V4GenericResponse
}

func (o *CreateClusterAppV4Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v4/clusters/{cluster_id}/apps/{app_name}/][%d] createClusterAppV4Unauthorized  %+v", 401, o.Payload)
}

func (o *CreateClusterAppV4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V4GenericResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateClusterAppV4Conflict creates a CreateClusterAppV4Conflict with default headers values
func NewCreateClusterAppV4Conflict() *CreateClusterAppV4Conflict {
	return &CreateClusterAppV4Conflict{}
}

/*CreateClusterAppV4Conflict handles this case with default header values.

App already exists
*/
type CreateClusterAppV4Conflict struct {
	Payload *models.V4GenericResponse
}

func (o *CreateClusterAppV4Conflict) Error() string {
	return fmt.Sprintf("[PUT /v4/clusters/{cluster_id}/apps/{app_name}/][%d] createClusterAppV4Conflict  %+v", 409, o.Payload)
}

func (o *CreateClusterAppV4Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V4GenericResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateClusterAppV4Default creates a CreateClusterAppV4Default with default headers values
func NewCreateClusterAppV4Default(code int) *CreateClusterAppV4Default {
	return &CreateClusterAppV4Default{
		_statusCode: code,
	}
}

/*CreateClusterAppV4Default handles this case with default header values.

error
*/
type CreateClusterAppV4Default struct {
	_statusCode int

	Payload *models.V4GenericResponse
}

// Code gets the status code for the create cluster app v4 default response
func (o *CreateClusterAppV4Default) Code() int {
	return o._statusCode
}

func (o *CreateClusterAppV4Default) Error() string {
	return fmt.Sprintf("[PUT /v4/clusters/{cluster_id}/apps/{app_name}/][%d] createClusterAppV4 default  %+v", o._statusCode, o.Payload)
}

func (o *CreateClusterAppV4Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V4GenericResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
